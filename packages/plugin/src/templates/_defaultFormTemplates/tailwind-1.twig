{% css formCss %}

<style>
    .required::after {
        content: "*";
        color: #d00;
        margin-left: 5px;
    }
</style>

{{ form.renderTag({
    attributes: {
        class: "w-full",
        row: { class: "flex flex-wrap -mx-3 mb-6" },
        errors: {
            class: "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4",
            role: "alert",
        },
    }
}) }}

{# Set styling for Ajax responses #}
<script>
  var form = document.querySelector('[data-id="{{ form.anchor }}"]');
  if (form) {
    form.addEventListener("freeform-ready", function (event) {
      var freeform = event.target.freeform;

      freeform.setOption("errorClassBanner", ["bg-red-100", "border", "border-red-400", "text-red-700", "px-4", "py-3", "rounded", "relative", "mb-4"]);
      freeform.setOption("errorClassList", ["errors", "text-red-500", "text-xs", "italic"]);
      freeform.setOption("errorClassField", ["border-red-500"]);
      freeform.setOption("successClassBanner", ["bg-green-100", "border", "border-green-500", "text-green-700", "px-4", "py-3", "rounded", "relative", "mb-4"]);
    })

    form.addEventListener("freeform-stripe-styling", function (event) {
      event.detail.base = {
        fontSize: "16px",
        fontFamily: "-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\"",
      }
    })
  }
</script>

{# Render tabs for pages #}
{% if form.pages|length > 1 %}
    <ul class="flex border-b">
        {% for page in form.pages %}
            <li class="mr-1">
                <a class="{{ form.currentPage.index == page.index ? 'bg-white inline-block border-l border-t border-r rounded-t py-2 px-4 text-blue-700 font-semibold' : 'bg-white inline-block py-2 px-4 text-gray-400 font-semibold disabled' }}">{{ page.label }}</a>
            </li>
        {% endfor %}
    </ul>
{% endif %}

{# Render errors #}
{% if form.hasErrors %}
    <div{{ form.attributes.errors }}>
        <strong class="font-bold">
            {{ form.errorMessage | t('freeform') }}
        </strong>
        {% if form.errors|length %}
            <ul class="mb-0 ">
                {% for error in form.errors %}
                    <li>{{ error }}</li>
                {% endfor %}
            </ul>
        {% endif %}
    </div>
{% endif %}

{# Define standard field classes #}
{% set standardFieldClasses = "appearance-none block w-full bg-gray-100 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" %}
{% set selectFieldClasses = "block appearance-none w-full bg-gray-100 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500" %}
{% set checkboxFieldClasses = "bg-gray-100 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" %}
{% set fileFieldClasses = "appearance-none block w-full text-gray-700 py-3 px-4 leading-tight" %}
{% set tableFieldClasses = "appearance-none w-full text-gray-700 py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" %}
{% set signatureFieldClasses = "bg-gray-200 hover:bg-gray-400 text-black font-normal py-1 px-2 rounded mr-1" %}
{% set standardLabelsClasses = "tracking-wide text-gray-700 text-xs font-bold mb-2" %}

{# Render form rows #}
{% for row in form.rows %}
    {% set columnCount = row|length %}

    <div{{ form.attributes.row }}>

        {% for cell in row %}

            {% set field = cell.field %}
            {% do field.setParameters({
                attributes: {
                    container: {
                        class: [
                            "w-full px-3 mb-6 md:mb-0",
                            columnCount > 1 ? "md:w-1/" ~ columnCount ~ " lg:w-1/" ~ columnCount ~ " xl:w-1/" ~ columnCount,
                            columnCount <= 1 ? "md:w-full lg:w-full xl:w-full",
                        ],
                    },
                    input: { class: [
                        standardFieldClasses,
                        field.type == "select" ? selectFieldClasses,
                        field.type == "checkbox" ? checkboxFieldClasses,
                        field.type == "file" ? fileFieldClasses,
                        field.type == "table" ? tableFieldClasses,
                        field.type == "signature" ? signatureFieldClasses,
                        field.hasErrors ? "border-red-500",
                    ]},
                    label: { class: [
                        "block",
                        "uppercase",
                        field.required ? "required",
                    ]},
                    instructions: { class: "text-gray-600 text-xs italic" },
                    errors: { class: "text-red-500 text-xs italic" },
                }
            }) %}



            {% if field.type == "checkbox-group" %}

                <div{{ field.attributes.container }}>

                    {{ field.renderLabel({
                        attributes: {
                            input: { "=class": "form-check-input" },
                        }
                    }) }}

                    {% for index, option in field.options %}
                        <div>
                            <input type="checkbox"
                                   name="{{ field.handle }}[]"
                                   value="{{ option.value }}"
                                   id="{{ field.idAttribute }}-{{ index }}"
                                   {{ field.attributes.input }}
                                   {{ option.checked ? "checked" : "" }}
                            />

                            <label class="form-check-label" for="{{ field.idAttribute }}-{{ index }}">
                                {{ option.label|t('freeform')|raw }}
                            </label>
                        </div>
                    {% endfor %}

                    {{ field.renderInstructions }}
                    {{ field.renderErrors }}

                </div>

            {% elseif field.type == "radio-group" %}

                <div{{ field.attributes.container }}>
                    {{ field.renderLabel({
                        attributes: {
                            input: { "=class": "form-check-input" },
                        }
                    }) }}

                    {% for index, option in field.options %}
                        <div>
                            <input type="radio"
                                   name="{{ field.handle }}"
                                   value="{{ option.value }}"
                                   id="{{ field.idAttribute }}-{{ index }}"
                                   {{ field.attributes.input }}
                                   {{ option.checked ? "checked" : "" }}
                            />
                            <label class="form-check-label" for="{{ field.idAttribute }}-{{ index }}">
                                {{ option.label|t('freeform')|raw }}
                            </label>
                        </div>
                    {% endfor %}

                    {{ field.renderInstructions }}
                    {{ field.renderErrors }}
                </div>

            {% elseif field.type == "select" %}

                <div{{ field.attributes.container }}>

                    {{ field.renderLabel }}

                    <div class="relative">
                        <select name="{{ field.handle }}" id="{{ field.idAttribute }}"{{ field.attributes.input }}>
                        {% for option in field.options %}
                            <option value="{{ option.value }}"{{ option.checked ? "selected" : "" }}>{{ option.label|t('freeform')|raw }}</option>
                        {% endfor %}
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/></svg>
                        </div>
                    </div>

                    {{ field.renderInstructions }}
                    {{ field.renderErrors }}
                </div>

            {% elseif field.type in ["checkbox"] %}

                <div{{ field.attributes.container }}>
                    <div class="form-check">
                        {{ field.renderInput({
                            attributes: {
                                input: { "=class": "form-check-input" },
                                label: { "=class": "form-check-label" },
                            }
                        }) }}
                        {{ field.renderLabel }}
                        {{ field.renderInstructions }}
                        {{ field.renderErrors }}
                    </div>
                </div>

            {% elseif field.type == "table" %}

                {{ field.render({
                    instructionsBelowField: true,
                    addButtonLabel: "Add +",
                    removeButtonLabel: "x",
                    tableAttributes: {
                        table: { class: field.attributes.input.get('class') },
                        label: { class: standardLabelsClasses },
                        addButton: { class: "bg-green-500 hover:bg-green-700 text-white font-normal py-2 px-4 rounded m-4" },
                        removeButton: { class: "bg-red-500 hover:bg-red-700 text-white font-normal py-2 px-4 rounded ml-2" },
                        input: { class: [standardFieldClasses, "my-2"] },
                        select: { class: selectFieldClasses },
                        checkbox: { class: [checkboxFieldClasses, "m-1"] },
                    }
                }) }}

            {% else %}

                {{ field.render }}

            {% endif %}

        {% endfor %}
    </div>
{% endfor %}

{{ form.renderClosingTag }}

{% import "_includes/forms" as forms %}

<div id="integration-type" data-type="{{ type }}">
    <input type="hidden" name="action" value="{{ action }}">
    {{ redirectInput('freeform/settings/'~type) }}
    {% if integration.id %}
        <input type="hidden" name="id" value="{{ integration.id }}">
    {% endif %}
    {{ csrfInput() }}

    {{ forms.selectField({
        first: true,
        label: "Service Provider"|t('freeform'),
        id: 'class',
        name: 'class',
        options: serviceProviderTypes|map(p => p.name),
        value: integration.class,
        errors: integration.getErrors('class'),
        required: true
    }) }}

    {{ forms.textField({
        label: "Name"|t('freeform'),
        instructions: "What this integration will be called in the CP."|t('freeform'),
        id: 'name',
        name: 'name',
        value: integration.name,
        errors: integration.getErrors('name'),
        autofocus: true,
        required: true
    }) }}

    {{ forms.textField({
        label: "Handle"|t('freeform'),
        instructions: "The unique name used to identify this integration."|t('freeform'),
        class: "code",
        id: 'handle',
        name: 'handle',
        value: integration.handle,
        errors: integration.getErrors('handle'),
        required: true
    }) }}

    <hr>

    {% if integration.id %}
        {% include "freeform/settings/components/auth-checker" with { integration: integration } %}
    {% elseif integration.errors('integration') %}
        <ul class="errors field">
            {% for error in integration.errors('integration') %}
                <li>{{ error }}</li>
            {% endfor %}
        </ul>
    {% endif %}

    <div class="propertiesWrapper">
        {% for className, type in serviceProviderTypes %}
            <div id="properties-{{ className|replace("\\", "") }}" style="display: none;">

                {% if type.readme %}
                    <div class="markdown-instructions markdown-body">
                        {{ type.readmeContent|markdown('gfm-comment') }}
                    </div>
                {% endif %}

                {% for property in type.properties|filter((prop) => not prop.hasFlag('internal')) %}
                    {% set handle = property.handle %}
                    {% set value = integration.metadata[handle] is defined ? integration.metadata[handle] : property.value %}

                    {% set options = {
                        label: property.label|t('freeform'),
                        instructions: property.instructions|t('freeform'),
                        class: "property-" ~ property.handle,
                        name: "properties["~className~"]["~property.handle~"]",

                        required: property.required,
                        errors: integration.errors(className~property.handle),
                        suggestEnvVars: true,
                    } %}

                    {% if property.hasFlag('readonly') %}
                        {% set options = options|merge({ readonly: true }) %}
                    {% endif %}

                    {% if property.type == "bool" %}

                        {% set options = options|merge({on: value, value: 1}) %}
                        {{ forms.lightswitchField(options) }}

                    {% elseif property.type == "select" %}

                        {% set opts = property.options ? property.options.toTwigArray() : {} %}
                        {{ forms.selectField(options|merge({ options: opts })) }}

                    {% else %}

                        {% if property.hasFlag('readonly') %}
                            {{ forms.textField(options) }}
                        {% else %}
                            {{ forms.autosuggestField(options) }}
                        {% endif %}

                    {% endif %}
                {% endfor %}
            </div>
        {% endfor %}
    </div>
</div>

!function(){function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},r(t)}function t(r,t){(null==t||t>r.length)&&(t=r.length);for(var e=0,o=new Array(t);e<t;e++)o[e]=r[e];return o}function e(t,e,o){return(e=function(t){var e=function(t,e){if("object"!==r(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var n=o.call(t,"string");if("object"!==r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===r(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}!function(){"use strict";$(".card-actions a.delete-form").on({click:function(r){var t,o=r.target.dataset,n=o.id,a=o.message;confirm(a)&&$.ajax({type:"post",url:Craft.getCpUrl("freeform/forms/delete"),data:(t={},e(t,Craft.csrfTokenName,Craft.csrfTokenValue),e(t,"id",n),t),success:function(t){var e=t.error,o=void 0===e?null:e;o?Craft.cp.displayError(o):$(r.target).parents("li[data-id]").remove()},error:function(r){Craft.cp.displayError(r)}})}}),$(".card-actions a.duplicate-form").on({click:function(r){var t,o=r.target.dataset,n=o.id,a=o.message;confirm(a)&&$.ajax({type:"post",url:Craft.getCpUrl("freeform/forms/duplicate"),data:(t={},e(t,Craft.csrfTokenName,Craft.csrfTokenValue),e(t,"id",n),t),success:function(r){var t=r.errors,e=void 0===t?[]:t;e.length?e.forEach((function(r){return Craft.cp.displayError(r)})):window.location.reload()},error:function(r){Craft.cp.displayError(r.message)}})}});var r=document.getElementById("form-cards");r&&new Sortable.default(r,{draggable:"li[data-id]",handle:".drag-handle"}).on("sortable:stop",(function(){setTimeout((function(){var r,o,n=(o=document.querySelectorAll("#form-cards > li"),function(r){if(Array.isArray(r))return t(r)}(o)||function(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}(o)||function(r,e){if(r){if("string"==typeof r)return t(r,e);var o=Object.prototype.toString.call(r).slice(8,-1);return"Object"===o&&r.constructor&&(o=r.constructor.name),"Map"===o||"Set"===o?Array.from(r):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(r,e):void 0}}(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(r){return r.dataset.id}));$.ajax({type:"post",url:Craft.getCpUrl("freeform/forms/sort"),data:(r={},e(r,Craft.csrfTokenName,Craft.csrfTokenValue),e(r,"order",n),r)})}),100)})),$("a.reset-spam").on({click:function(){var r,t=$(this).data(),o=t.id,n=t.message,a=$(this);return!!confirm(n)&&($.ajax({url:Craft.getCpUrl("freeform/forms/reset-spam-counter"),type:"post",dataType:"json",data:(r={},e(r,Craft.csrfTokenName,Craft.csrfTokenValue),e(r,"formId",o),r),success:function(r){r.success?a.siblings(".counter").html("0"):console.error(r)}}),!1)}}),$(".exporter").on({change:function(){$(this).val()&&$(this).parents("form").submit(),$(this).val("")}})}()}();